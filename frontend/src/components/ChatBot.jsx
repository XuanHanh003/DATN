import React, { useState, useEffect } from 'react';
import { useCart } from '../context/CartContext';
import '../styles/ChatBot.css';
import { GoogleGenerativeAI } from '@google/generative-ai';
import axios from 'axios';

function ChatBot() {
    const [isChatOpen, setIsChatOpen] = useState(false);
    const [chatMessages, setChatMessages] = useState([]);
    const [userInput, setUserInput] = useState('');
    const [isChatLoading, setIsChatLoading] = useState(false);
    const [hasGreeted, setHasGreeted] = useState(false);
    const [productOptions, setProductOptions] = useState([]); // L∆∞u danh s√°ch s·∫£n ph·∫©m t√¨m th·∫•y
    const [awaitingSelection, setAwaitingSelection] = useState(false); // Tr·∫°ng th√°i ch·ªù ng∆∞·ªùi d√πng ch·ªçn

    const { cartItems, total, totalItems } = useCart();

    const genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || 'AIzaSyA4rBPt3rEcC0Bc0LDgille2BGAUCUbns0');
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

    useEffect(() => {
        const productInfo = cartItems.length > 0
            ? cartItems.map(item => `${item.name}: ${item.price.toLocaleString()} VND, S·ªë l∆∞·ª£ng: ${item.quantity}`).join('\n')
            : 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.';

        if (!hasGreeted) {
            setChatMessages([
                { role: 'model', text: `Xin ch√†o! T√¥i l√† chatbot h·ªó tr·ª£ gi·ªè h√†ng. ƒê√¢y l√† danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa b·∫°n:\n${productInfo}\nT·ªïng s·ªë l∆∞·ª£ng: ${totalItems}\nH√£y h·ªèi t√¥i nh∆∞: "M√≠t s·∫•y c√≤n h√†ng kh√¥ng?". T√¥i s·∫Ω hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m li√™n quan ƒë·ªÉ b·∫°n ch·ªçn!` }
            ]);
            setHasGreeted(true);
        } else {
            setChatMessages(prev => {
                const updatedMessages = [...prev];
                if (updatedMessages.length > 0) {
                    updatedMessages[0] = {
                        role: 'model',
                        text: `ƒê√¢y l√† danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa b·∫°n:\n${productInfo}\nT·ªïng s·ªë l∆∞·ª£ng: ${totalItems}\nH√£y h·ªèi t√¥i nh∆∞: "M√≠t s·∫•y c√≤n h√†ng kh√¥ng?". T√¥i s·∫Ω hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m li√™n quan ƒë·ªÉ b·∫°n ch·ªçn!`
                    };
                }
                return updatedMessages;
            });
        }

        const chatBox = document.getElementById('chatBox');
        if (chatBox) {
            chatBox.scrollTop = chatBox.scrollHeight;
        }
    }, [cartItems, total, totalItems, hasGreeted]);

    const toggleChat = () => {
        setIsChatOpen(!isChatOpen);
    };

    const extractProductName = (text) => {
        const productKeywords = ['c√≤n h√†ng', 'gi√°', 'lo·∫°i', 's·∫£n ph·∫©m', 'th√†nh ph·∫ßn', 'ch·∫•t li·ªáu', 'b·∫£o h√†nh', 'm√†u', 'size', 'ph√π h·ª£p'];
        const words = text.toLowerCase().split(' ');
        let productName = '';

        for (let i = 0; i < words.length; i++) {
            if (productKeywords.includes(words[i])) {
                productName = words.slice(0, i).join(' ').trim();
                break;
            }
        }

        return productName || words[0]; // N·∫øu kh√¥ng t√¨m th·∫•y keyword, l·∫•y t·ª´ ƒë·∫ßu ti√™n l√†m t√™n s·∫£n ph·∫©m
    };

    const classifyIntent = (text) => {
        const dbKeywords = ["c√≤n h√†ng", "th√†nh ph·∫ßn", "ch·∫•t li·ªáu", "b·∫£o h√†nh", "m√†u", "size", "gi√°", "lo·∫°i s·∫£n ph·∫©m", "ph√π h·ª£p"];
        const orderKeywords = ["ƒë∆°n h√†ng", "t√¨nh tr·∫°ng", "h·ªßy ƒë∆°n", "ƒë·∫∑t nh·∫ßm"];

        const lowerText = text.toLowerCase();
        if (dbKeywords.some(keyword => lowerText.includes(keyword))) return 'product';
        if (orderKeywords.some(keyword => lowerText.includes(keyword))) return 'order';
        return 'faq';
    };

    const fetchFromBackend = async (type, query) => {
        try {
            if (type === 'product') {
                const productName = extractProductName(query);
                if (!productName || productName.trim() === '') {
                    return 'Vui l√≤ng cung c·∫•p t√™n s·∫£n ph·∫©m c·ª• th·ªÉ (v√≠ d·ª•: "M√≠t s·∫•y").';
                }
                const res = await axios.get(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/products/search-expanded?keyword=${encodeURIComponent(productName)}`, {
                    timeout: 5000
                });
                if (typeof res.data !== 'object' || res.data === null) {
                    return 'L·ªói: Ph·∫£n h·ªìi t·ª´ server kh√¥ng ph·∫£i JSON h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra server backend.';
                }
                const data = res.data;
                if (!data || data.length === 0) {
                    return `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m li√™n quan ƒë·∫øn "${productName}". Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c ƒë·∫£m b·∫£o database c√≥ d·ªØ li·ªáu.`;
                }
                setProductOptions(data);
                setAwaitingSelection(true);
                return `T√¥i t√¨m th·∫•y c√°c s·∫£n ph·∫©m li√™n quan ƒë·∫øn "${productName}":\n${data.map((p, index) => `${index + 1}. ${p.name}`).join('\n')}\nVui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± (1-${data.length}) ƒë·ªÉ xem chi ti·∫øt.`;
            }
            if (type === 'order') {
                return 'B·∫°n c√≥ th·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng ƒë∆°n h√†ng t·∫°i trang "ƒê∆°n h√†ng c·ªßa t√¥i".';
            }
            return null;
        } catch (err) {
            console.error('L·ªói trong fetchFromBackend:', err);
            if (err.code === 'ECONNABORTED') {
                return 'L·ªói: K·∫øt n·ªëi v·ªõi server qu√° th·ªùi gian. Vui l√≤ng ki·ªÉm tra server backend ho·∫∑c th·ª≠ l·∫°i sau.';
            }
            if (err.response) {
                if (err.response.status === 404) {
                    return `L·ªói 404: Endpoint /api/products/search-expanded kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh server backend.`;
                }
                if (err.response.status === 500) {
                    return 'L·ªói: Server g·∫∑p s·ª± c·ªë (500), c√≥ th·ªÉ do MongoDB. Vui l√≤ng ki·ªÉm tra log server.';
                }
                return `L·ªói khi l·∫•y d·ªØ li·ªáu: ${err.response.status} ${err.response.statusText}`;
            }
            if (err.message.includes('Unexpected token')) {
                return 'L·ªói: Ph·∫£n h·ªìi t·ª´ server kh√¥ng ph·∫£i JSON h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra server.';
            }
            return 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i sau.';
        }
    };

    const getPredefinedAnswer = (text) => {
        const faq = [
            { q: 'li√™n h·ªá', a:'Th√¥ng tin li√™n h·ªá c·ªßa shop 0379459717'},
            { q: 'ph√≠ ship', a: 'Mi·ªÖn ph√≠ ship cho t·∫•t c·∫£ ƒë∆°n h√†ng' },
            { q: 'giao h√†ng to√†n qu·ªëc', a: 'Ch√∫ng t√¥i c√≥ giao h√†ng to√†n qu·ªëc.' },
            { q: 'thanh to√°n', a: 'B·∫°n c√≥ th·ªÉ thanh to√°n b·∫±ng VNPAY, th·∫ª ng√¢n h√†ng' },
            { q: 'ƒë·ªïi tr·∫£', a: 'Ch√∫ng t√¥i kh√¥ng c√≥ ch√≠nh s√°ch ƒë·ªïi tr·∫£. N·∫øu s·∫£n ph·∫©m c√≥ v·∫•n ƒë·ªÅ, li√™n h·ªá qua Zalo 0379459717.' }
        ];

        const lower = text.toLowerCase();
        const found = faq.find(f => lower.includes(f.q));
        return found ? found.a : null;
    };

    const callGemini = async (text) => {
        try {
            const productInfo = cartItems.length > 0
                ? cartItems.map(item => `${item.name}: ${item.price.toLocaleString()} VND, S·ªë l∆∞·ª£ng: ${item.quantity}, Danh m·ª•c: ${item.category || 'Kh√¥ng x√°c ƒë·ªãnh'}`).join('\n')
                : 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.';

            const prompt = `B·∫°n l√† chatbot h·ªó tr·ª£ kh√°ch h√†ng. C√¢u h·ªèi: "${text}".\nTh√¥ng tin gi·ªè h√†ng:\n${productInfo}\nT·ªïng ti·ªÅn: ${total.toLocaleString()} VND\nT·ªïng s·ªë l∆∞·ª£ng: ${totalItems}\nN·∫øu li√™n quan ƒë·∫øn s·∫£n ph·∫©m (v√≠ d·ª•: M√≠t s·∫•y), g·ª£i √Ω c√°c bi·∫øn th·ªÉ n·∫øu ph√π h·ª£p.`;

            const result = await model.generateContent(prompt);
            const response = await result.response;
            return response.text();
        } catch (err) {
            console.error('L·ªói khi g·ªçi Gemini API:', err);
            return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay. Vui l√≤ng th·ª≠ l·∫°i sau!';
        }
    };

    const handleSendMessage = async () => {
        if (!userInput.trim()) return;

        const userMessage = { role: 'user', text: userInput };
        setChatMessages(prev => [...prev, userMessage]);
        setIsChatLoading(true);

        let reply = '';

        if (awaitingSelection) {
            const selection = parseInt(userInput.trim(), 10);
            if (isNaN(selection) || selection < 1 || selection > productOptions.length) {
                reply = `Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá t·ª´ 1 ƒë·∫øn ${productOptions.length}.`;
            } else {
                const selectedProduct = productOptions[selection - 1];
                const stockStatus = selectedProduct.stock > 0 ? `C√≤n ${selectedProduct.stock} s·∫£n ph·∫©m trong kho.` : 'H·∫øt h√†ng.';
                reply = `${selectedProduct.name} - Gi√°: ${selectedProduct.prices['250'].toLocaleString()} VND (250g), T√¨nh tr·∫°ng: ${stockStatus}`;
                setAwaitingSelection(false);
                setProductOptions([]);
            }
        } else {
            const intent = classifyIntent(userInput);
            if (intent === 'faq') {
                reply = getPredefinedAnswer(userInput) || await callGemini(userInput);
            } else {
                reply = await fetchFromBackend(intent, userInput);
                if (!reply) reply = await callGemini(userInput);
            }
        }

        setChatMessages(prev => [...prev, { role: 'model', text: reply }]);
        setIsChatLoading(false);
        setUserInput('');
    };

    return (
        <>
            <div className="chat-icon" onClick={toggleChat}>üí¨</div>
            <div className={`chat-container ${isChatOpen ? '' : 'hidden'}`} id="chatContainer">
                <div className="chat-header">
                    <h2>H·ªó tr·ª£ kh√°ch h√†ng</h2>
                    <button className="close-chat-btn" onClick={toggleChat}>
                        <i className="fas fa-times"></i>
                    </button>
                </div>
                <div className="chat-box" id="chatBox">
                    {chatMessages.map((msg, index) => (
                        <div key={index} className={`chat-message ${msg.role}`}>
                            <p>{msg.text}</p>
                        </div>
                    ))}
                    {isChatLoading && <div className="chat-message model">ƒêang x·ª≠ l√Ω...</div>}
                </div>
                <div className="input-group">
                    <input
                        type="text"
                        id="userInput"
                        placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                        value={userInput}
                        onChange={(e) => setUserInput(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    />
                    <button onClick={handleSendMessage}>G·ª≠i</button>
                </div>
            </div>
        </>
    );
}

export default ChatBot;